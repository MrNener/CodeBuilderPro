<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" GeneratedClassNamespace="CodeBuilderPlus.Properties" GeneratedClassName="Settings">
  <Profiles />
  <Settings>
    <Setting Name="strConn" Type="System.String" Scope="User">
      <Value Profile="(Default)">Server=.\SQLEXPRESS;Database=ECMS;Trusted_Connection=True;</Value>
    </Setting>
    <Setting Name="strNamespace" Type="System.String" Scope="User">
      <Value Profile="(Default)">MyProject</Value>
    </Setting>
    <Setting Name="strPath" Type="System.String" Scope="User">
      <Value Profile="(Default)">双击此处选择文件导出路径...</Value>
    </Setting>
    <Setting Name="GenericSQLGeneratorHelper" Type="System.String" Scope="Application">
      <Value Profile="(Default)">using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;
using System.Text;
namespace ${namespace}Helper
{
    public static class GenericSQLGenerator
    {
        public static T ToModel&lt;T&gt;(DataRow row) where T : class,new()
        {
            var prList = GetPropertyInfo&lt;T&gt;(row.Table);
            var item = new T();
            prList.ForEach(p =&gt;
            {
                if (row[p.Name] != DBNull.Value)
                {
                    p.SetValue(item, row[p.Name], null);
                }
            });
            return item;
        }
        public static List&lt;PropertyInfo&gt; GetPropertyInfo&lt;T&gt;(DataTable dt) where T : class,new()
        {
            Type type = typeof(T);
            var prList = new List&lt;PropertyInfo&gt;();
            Array.ForEach(type.GetProperties(), p =&gt;
            {
                if (dt.Columns.Contains(p.Name))
                { 
                    prList.Add(p);
                }
            });
            return prList;
        }
        public static List&lt;T&gt; ToList&lt;T&gt;(DataTable dt) where T : class,new()
        {
            var prList=GetPropertyInfo&lt;T&gt;(dt);
            List&lt;T&gt; ls = new List&lt;T&gt;();
            foreach (DataRow row in dt.Rows)
            {
                var item = new T();
                prList.ForEach(p =&gt;
                {
                    if (row[p.Name] != DBNull.Value)
                    {
                        p.SetValue(item, row[p.Name], null);
                    }
                });
                ls.Add(item);
            }
            return ls;
        }
        public static string GetWhereStr&lt;T&gt;(T entity, string tableName, out List&lt;SqlParameter&gt; list, params string[] fields) where T : new()
        {
            StringBuilder sbu = new StringBuilder();
            list = new List&lt;SqlParameter&gt;();

            sbu.Append("");
            sbu.Append("select * from [" + tableName + "] where (1=1)");
            if (fields != null)
            {
                //遍历每一个要生成SQL的字段，取出内容
                foreach (string field in fields)
                {
                    object value = entity.GetType().GetProperty(field).GetValue(entity, null);
                    if (value is int || value is double || value is decimal || value is double || value is long || value is float)
                    {

                        sbu.AppendFormat(" and ([{0}]=@{0})", field);
                        list.Add(new SqlParameter("@" + field + "", value));

                    }
                    else if (value is DateTime)
                    {
                        sbu.AppendFormat(" and ([{0}]=@{0})", field);
                        list.Add(new SqlParameter("@" + field + "", Convert.ToDateTime(value)));

                    }
                    else if (value is Guid)
                    {
                        sbu.AppendFormat(" and ([{0}]=@{0})", field);
                        list.Add(new SqlParameter("@" + field + "", new Guid(value.ToString())));

                    }
                    else if (value is Boolean)
                    {
                        sbu.AppendFormat(" and ([{0}]=@{0})", field);
                        list.Add(new SqlParameter("@" + field + "", Convert.ToBoolean(value)));

                    }
                    else if (value is String || value is Char)
                    {
                        sbu.AppendFormat(" and ([{0}]=@{0})", field);
                        list.Add(new SqlParameter("@" + field + "", Convert.ToString(value)));

                    }
                    else
                    {
                        sbu.AppendFormat(" and ([{0}]=@{0})", field);
                        list.Add(new SqlParameter("@" + field + "",CommonExtend.ToDBValue(value)));
                    }
                }
            }
            return (sbu.ToString());
        }
    }
}</Value>
    </Setting>
    <Setting Name="SqlHelper" Type="System.String" Scope="Application">
      <Value Profile="(Default)">using System.Data.SqlClient;
using System.Data;
using ${namespace}Helper.Bases;

namespace ${namespace}Helper
{
    public  class SqlServerHelper: BaseSqlHelperConf, ISqlHelper&lt;SqlConnection ,SqlParameter&gt;
    {
        public SqlServerHelper() : base() { }
        public SqlServerHelper(string name) : base(name) { }


        public object ExecuteScalar(string cmdText, params SqlParameter[] parameters)
        {
            using (SqlConnection conn = new SqlConnection(ConnectionStr))
            {
                conn.Open();
                return ExecuteScalar(conn, cmdText, parameters );
            }
        }

        public  DataSet ExecuteDataSet(string cmdText, params SqlParameter[] parameters)
        {
            using (SqlConnection con = new SqlConnection(ConnectionStr))
            {
                con.Open();
                return ExecuteDataSet(con, cmdText, parameters);
            }
        }

        public  DataTable ExecuteDataTable(string cmdText, params SqlParameter[] parameters)
        {
            using (SqlConnection con = new SqlConnection(ConnectionStr))
            {
                con.Open();
                return ExecuteDataTable(con, cmdText, parameters );
            }
        }

        public  int ExecuteNonQuery(SqlConnection conn, string cmdText,
           params SqlParameter[] parameters)
        {
            using (SqlCommand cmd = conn.CreateCommand())
            {
                cmd.CommandText = cmdText;
                cmd.Parameters.AddRange(parameters);
                return cmd.ExecuteNonQuery();
            }
        }

        /// &lt;summary&gt;
        /// 执行返回第一行第一列
        /// &lt;/summary&gt;
        /// &lt;param name="conn"&gt;&lt;/param&gt;
        /// &lt;param name="cmdText"&gt;&lt;/param&gt;
        /// &lt;param name="parameters"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public  object ExecuteScalar(SqlConnection conn, string cmdText,
            params SqlParameter[] parameters)
        {
            using (SqlCommand cmd = conn.CreateCommand())
            {
                cmd.CommandText = cmdText;
                cmd.Parameters.AddRange(parameters);
                return cmd.ExecuteScalar();
            }
        }
        /// &lt;summary&gt;
        /// 执行返回DataTable
        /// &lt;/summary&gt;
        /// &lt;param name="con"&gt;&lt;/param&gt;
        /// &lt;param name="cmdText"&gt;&lt;/param&gt;
        /// &lt;param name="parameters"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public  DataTable ExecuteDataTable(SqlConnection con, string cmdText, params SqlParameter[] parameters)
        {
            return ExecuteDataSet(con, cmdText, parameters).Tables[0];
        }
        /// &lt;summary&gt;
        /// 执行返回DataSet
        /// &lt;/summary&gt;
        /// &lt;param name="con"&gt;&lt;/param&gt;
        /// &lt;param name="cmdText"&gt;&lt;/param&gt;
        /// &lt;param name="parameters"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public  DataSet ExecuteDataSet(SqlConnection con, string cmdText, params SqlParameter[] parameters)
        {
            using (SqlCommand cmd = con.CreateCommand())
            {
                cmd.CommandText = cmdText;
                cmd.Parameters.AddRange(parameters);
                using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                {
                    DataSet ds = new DataSet();
                    adapter.FillSchema(ds, SchemaType.Source);
                    adapter.Fill(ds);
                    return ds;
                }
            }
        }

        public  int ExecuteNonQuery(string cmdText, params SqlParameter[] parameters)
        {
            using (SqlConnection conn = new SqlConnection(ConnectionStr))
            {
                conn.Open();
                return ExecuteNonQuery(conn, cmdText, parameters );
            }
        }
    }
}</Value>
    </Setting>
    <Setting Name="MySqlHelper" Type="System.String" Scope="Application">
      <Value Profile="(Default)">using System.Data;
using MySql.Data.MySqlClient;
using ${namespace}Helper.Bases;

namespace ${namespace}Helper
{
    public  class MySqlHelper : BaseSqlHelperConf, ISqlHelper&lt;MySqlConnection, MySqlParameter&gt;
    {
        public MySqlHelper() : base() { }
        public MySqlHelper(string name) : base(name) { }

        public DataSet ExecuteDataSet(string cmdText, params MySqlParameter[] parameters)
        {
            using (MySqlConnection con = new MySqlConnection(ConnectionStr))
            {
                con.Open();
                return ExecuteDataSet(con, cmdText, parameters);
            }
        }

        public DataSet ExecuteDataSet(MySqlConnection con, string cmdText, params MySqlParameter[] parameters)
        {
            using (MySqlCommand cmd = con.CreateCommand())
            {
                cmd.CommandText = cmdText;
                cmd.Parameters.AddRange(parameters);
                using (MySqlDataAdapter adapter = new MySqlDataAdapter(cmd))
                {
                    DataSet ds = new DataSet();
                    adapter.FillSchema(ds, SchemaType.Source);
                    adapter.Fill(ds);
                    return ds;
                }
            }
        }

        public DataTable ExecuteDataTable(string cmdText, params MySqlParameter[] parameters)
        {
            using (MySqlConnection con = new MySqlConnection(ConnectionStr))
            {
                con.Open();
                return ExecuteDataTable(con, cmdText, parameters);
            }
        }

        public DataTable ExecuteDataTable(MySqlConnection con, string cmdText, params MySqlParameter[] parameters)
        {
            return ExecuteDataSet(con, cmdText, parameters).Tables[0];
        }

        public int ExecuteNonQuery(string cmdText, params MySqlParameter[] parameters)
        {
            using (MySqlConnection conn = new MySqlConnection(ConnectionStr))
            {
                conn.Open();
                return ExecuteNonQuery(conn, cmdText, parameters);
            }
        }

        public int ExecuteNonQuery(MySqlConnection conn, string cmdText, params MySqlParameter[] parameters)
        {
            using (MySqlCommand cmd = conn.CreateCommand())
            {
                cmd.CommandText = cmdText;
                cmd.Parameters.AddRange(parameters);
                return cmd.ExecuteNonQuery();
            }
        }

        public object ExecuteScalar(string cmdText, params MySqlParameter[] parameters)
        {
            using (MySqlConnection conn = new MySqlConnection(ConnectionStr))
            {
                conn.Open();
                return ExecuteScalar(conn, cmdText, parameters);
            }
        }

        public object ExecuteScalar(MySqlConnection conn, string cmdText, params MySqlParameter[] parameters)
        {
            using (MySqlCommand cmd = conn.CreateCommand())
            {
                cmd.CommandText = cmdText;
                cmd.Parameters.AddRange(parameters);
                return cmd.ExecuteScalar();
            }
        }
    }
}
</Value>
    </Setting>
    <Setting Name="GenericMySQLGeneratorHelper" Type="System.String" Scope="Application">
      <Value Profile="(Default)">using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Reflection;
using System.Text;
namespace ${namespace}Helper
{
    public static class GenericSQLGenerator
    {
        public static T ToModel&lt;T&gt;(DataRow row) where T : class, new()
        {
            var prList = GetPropertyInfo&lt;T&gt;(row.Table);
            var item = new T();
            prList.ForEach(p =&gt;
            {
                if (row[p.Name] != DBNull.Value)
                {
                    p.SetValue(item, row[p.Name], null);
                }
            });
            return item;
        }
        public static List&lt;PropertyInfo&gt; GetPropertyInfo&lt;T&gt;(DataTable dt) where T : class, new()
        {
            Type type = typeof(T);
            var prList = new List&lt;PropertyInfo&gt;();
            Array.ForEach(type.GetProperties(), p =&gt;
            {
                if (dt.Columns.Contains(p.Name))
                {
                    prList.Add(p);
                }
            });
            return prList;
        }
        public static List&lt;T&gt; ToList&lt;T&gt;(DataTable dt) where T : class, new()
        {
            var prList = GetPropertyInfo&lt;T&gt;(dt);
            List&lt;T&gt; ls = new List&lt;T&gt;();
            foreach (DataRow row in dt.Rows)
            {
                var item = new T();
                prList.ForEach(p =&gt;
                {
                    if (row[p.Name] != DBNull.Value)
                    {
                        p.SetValue(item, row[p.Name], null);
                    }
                });
                ls.Add(item);
            }
            return ls;
        }
        public static string GetWhereStr&lt;T&gt;(T entity, string tableName, out List&lt;MySqlParameter&gt; list, params string[] fields) where T : new()
        {
            StringBuilder sbu = new StringBuilder();
            list = new List&lt;MySqlParameter&gt;();

            sbu.Append("");
            sbu.Append("select * from `" + tableName + "` where (1=1)");
            if (fields != null)
            {
                //遍历每一个要生成MySql的字段，取出内容
                foreach (string field in fields)
                {
                    object value = entity.GetType().GetProperty(field).GetValue(entity, null);
                    if (value is int || value is double || value is decimal || value is double || value is long || value is float)
                    {

                        sbu.AppendFormat(" and (`{0}`=@{0})", field);
                        list.Add(new MySqlParameter("@" + field + "", value));

                    }
                    else if (value is DateTime)
                    {
                        sbu.AppendFormat(" and (`{0}`=@{0})", field);
                        list.Add(new MySqlParameter("@" + field + "", Convert.ToDateTime(value)));

                    }
                    else if (value is Guid)
                    {
                        sbu.AppendFormat(" and (`{0}`=@{0})", field);
                        list.Add(new MySqlParameter("@" + field + "", new Guid(value.ToString())));

                    }
                    else if (value is Boolean)
                    {
                        sbu.AppendFormat(" and (`{0}`=@{0})", field);
                        list.Add(new MySqlParameter("@" + field + "", Convert.ToBoolean(value)));

                    }
                    else if (value is String || value is Char)
                    {
                        sbu.AppendFormat(" and (`{0}`=@{0})", field);
                        list.Add(new MySqlParameter("@" + field + "", Convert.ToString(value)));

                    }
                    else
                    {
                        sbu.AppendFormat(" and (`{0}`=@{0})", field);
                        list.Add(new MySqlParameter("@" + field + "", CommonExtend.ToDBValue(value)));
                    }
                }
            }
            return (sbu.ToString());
        }
    }
}</Value>
    </Setting>
    <Setting Name="CommonExtend" Type="System.String" Scope="Application">
      <Value Profile="(Default)">using System;

namespace ${namespace}Helper
{
    public static  class CommonExtend
    {
        /// &lt;summary&gt;
        /// null 转换为DBNull
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static object ToDBValue( object value)
        {
            return value == null ? DBNull.Value : value;
        }
        /// &lt;summary&gt;
        /// DBNull转换为null
        /// &lt;/summary&gt;
        /// &lt;param name="dbValue"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static object FromDBValue( object dbValue)
        {
            return dbValue == DBNull.Value ? null : dbValue;
        }
    }
}</Value>
    </Setting>
    <Setting Name="BaseSqlHelperConf" Type="System.String" Scope="Application">
      <Value Profile="(Default)">using System.Configuration;

namespace ${namespace}Helper.Bases
{
    public abstract class BaseSqlHelperConf
    {
        protected string ConnectionStr { get; set; }

        public   BaseSqlHelperConf() {
            ConnectionStr = ConfigurationManager.ConnectionStrings["dbConnect"].ConnectionString;
        }
        public BaseSqlHelperConf(string name)
        {
            ConnectionStr = ConfigurationManager.ConnectionStrings[name].ConnectionString;
        }
        public void ChangeConnectionSource(string name)
        {
            ConnectionStr= ConfigurationManager.ConnectionStrings[name].ConnectionString;
        }
    }
}</Value>
    </Setting>
    <Setting Name="ISqlHelper" Type="System.String" Scope="Application">
      <Value Profile="(Default)">using System.Data;
using System.Data.Common;

namespace ${namespace}Helper.Bases
{
    public interface ISqlHelper&lt;C,P&gt; 
        where C: DbConnection,new ()
       where P: DbParameter,new ()
    {
        /// &lt;summary&gt;
        /// 执行返回受影响的行数
        /// &lt;/summary&gt;
        /// &lt;param name="cmdText"&gt;&lt;/param&gt;
        /// &lt;param name="parameters"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int ExecuteNonQuery(string cmdText, params P[] parameters);

        /// &lt;summary&gt;
        /// 执行返回DataSet
        /// &lt;/summary&gt;
        /// &lt;param name="cmdText"&gt;&lt;/param&gt;
        /// &lt;param name="parameters"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        DataSet ExecuteDataSet(string cmdText, params P[] parameters);

        /// &lt;summary&gt;
        /// 执行返回第一行第一列
        /// &lt;/summary&gt;
        /// &lt;param name="cmdText"&gt;&lt;/param&gt;
        /// &lt;param name="parameters"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        object ExecuteScalar(string cmdText, params P[] parameters);

        /// &lt;summary&gt;
        /// 执行返回DataTable
        /// &lt;/summary&gt;
        /// &lt;param name="cmdText"&gt;&lt;/param&gt;
        /// &lt;param name="parameters"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        DataTable ExecuteDataTable(string cmdText, params P[] parameters);

        /// &lt;summary&gt;
        /// 执行返回受影响的行数
        /// &lt;/summary&gt;
        /// &lt;param name="conn"&gt;&lt;/param&gt;
        /// &lt;param name="cmdText"&gt;&lt;/param&gt;
        /// &lt;param name="parameters"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int ExecuteNonQuery(C conn, string cmdText,
           params P[] parameters);

        /// &lt;summary&gt;
        /// 执行返回第一行第一列
        /// &lt;/summary&gt;
        /// &lt;param name="conn"&gt;&lt;/param&gt;
        /// &lt;param name="cmdText"&gt;&lt;/param&gt;
        /// &lt;param name="parameters"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        object ExecuteScalar(C conn, string cmdText,
            params P[] parameters);


        /// &lt;summary&gt;
        /// 执行返回DataTable
        /// &lt;/summary&gt;
        /// &lt;param name="con"&gt;&lt;/param&gt;
        /// &lt;param name="cmdText"&gt;&lt;/param&gt;
        /// &lt;param name="parameters"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        DataTable ExecuteDataTable(C con, string cmdText, params P[] parameters);


        /// &lt;summary&gt;
        /// 执行返回DataSet
        /// &lt;/summary&gt;
        /// &lt;param name="con"&gt;&lt;/param&gt;
        /// &lt;param name="cmdText"&gt;&lt;/param&gt;
        /// &lt;param name="parameters"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        DataSet ExecuteDataSet(C con, string cmdText, params P[] parameters);
    }
}</Value>
    </Setting>
    <Setting Name="IBaseDAL" Type="System.String" Scope="Application">
      <Value Profile="(Default)">using System.Collections.Generic;

namespace namespace ${namespace}IDAL.Bases
{
    public   interface IBaseDAL&lt;T&gt; where T :class,new ()
    {
       
        /// &lt;summary&gt;
        /// ToModel
        /// &lt;/summary&gt;
        /// &lt;param name="row"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        T ToModel(System.Data.DataRow row);

        /// &lt;summary&gt;
        /// 插入一条记录
        /// &lt;/summary&gt;
        /// &lt;param name="model"&gt;Hlt_CardInfo类的对象&lt;/param&gt;
        /// &lt;returns&gt;object 主键&lt;/returns&gt;
        object Insert(T model);

        /// &lt;summary&gt;
        /// 删除一条记录
        /// &lt;/summary&gt;
        /// &lt;param name="Id"&gt;主键&lt;/param&gt;
        /// &lt;returns&gt;删除是否成功&lt;/returns&gt;
        bool DeleteById(string id);


        /// &lt;summary&gt;
        /// 更新一条记录
        /// &lt;/summary&gt;
        /// &lt;param name="model"&gt;Hlt_CardInfo类的对象&lt;/param&gt;
        /// &lt;returns&gt;更新是否成功&lt;/returns&gt;
        bool Update(T model);

        /// &lt;summary&gt;
        /// 获得一条记录
        /// &lt;/summary&gt;
        /// &lt;param name="Id"&gt;主键&lt;/param&gt;
        /// &lt;returns&gt;Hlt_CardInfo类的对象&lt;/returns&gt;
        T GetById(string id);


        /// &lt;summary&gt;
        /// 获得所有记录
        /// &lt;/summary&gt;
        /// &lt;returns&gt;Hlt_CardInfo类的对象的枚举&lt;/returns&gt;
        IEnumerable&lt;T&gt; ListAll();

        /// &lt;summary&gt;
        /// 通过条件获得满足条件的记录
        /// &lt;/summary&gt;
        /// &lt;param name="model"&gt;Hlt_CardInfo类的对象&lt;/param&gt;
        /// &lt;param name="whereStr"&gt;其他的sql 语句  &lt;/param&gt;
        /// &lt;param name="fields"&gt;需要的条件的字段名&lt;/param&gt;
        /// &lt;returns&gt;满足条件的记录&lt;/returns&gt;
        IEnumerable&lt;T&gt; ListByWhere(T model, string whereStr, params string[] fields);

        /// &lt;summary&gt;
        /// 分页查询
        /// &lt;/summary&gt;
        /// &lt;param name="page"&gt;页数（从1开始计数）&lt;/param&gt;
        /// &lt;param name="num"&gt;每页个数（从1开始计数）&lt;/param&gt;
        /// &lt;param name="orderBy"&gt;排序条件&lt;/param&gt;
        /// &lt;param name="isDesc"&gt;是否降序&lt;/param&gt;
        /// &lt;param name="whereArr"&gt;查询条件：例如ID=1,NAME='ADMIN'&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        IEnumerable&lt;T&gt; ListByPage(int page = 1, int num = 10, string orderBy = "id", bool isDesc = true, params string[] whereArr);
    }
}</Value>
    </Setting>
    <Setting Name="BaseDALConf" Type="System.String" Scope="Application">
      <Value Profile="(Default)">using ${namespace}Helper.Bases;
using System.Data.Common;

namespace ${namespace}DAL.Bases
{
    public abstract class BaseDALConf&lt;C, P, H&gt;
        where C : DbConnection, new()
        where P : DbParameter, new()
        where H : ISqlHelper&lt;C, P&gt;, new()
    {
        protected ISqlHelper&lt;C, P&gt; SqlHelper { get; set; }

        public BaseDALConf(H helper)
        {
            this.SqlHelper = helper;
        }
        public BaseDALConf()
        {
            this.SqlHelper = new H();
        }
    }
}
</Value>
    </Setting>
  </Settings>
</SettingsFile>