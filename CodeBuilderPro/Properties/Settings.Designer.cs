//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeBuilderPro.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "14.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Server=.\\SQLEXPRESS;Database=ECMS;Trusted_Connection=True;")]
        public string strConn {
            get {
                return ((string)(this["strConn"]));
            }
            set {
                this["strConn"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("MyProject")]
        public string strNamespace {
            get {
                return ((string)(this["strNamespace"]));
            }
            set {
                this["strNamespace"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("双击此处选择文件导出路径...")]
        public string strPath {
            get {
                return ((string)(this["strPath"]));
            }
            set {
                this["strPath"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing Syste" +
            "m.Data.SqlClient;\r\nusing System.Reflection;\r\nusing System.Text;\r\nnamespace ${nam" +
            "espace}Helper\r\n{\r\n    public static class GenericSQLGenerator\r\n    {\r\n        pu" +
            "blic static T ToModel<T>(DataRow row) where T : class,new()\r\n        {\r\n        " +
            "    var prList = GetPropertyInfo<T>(row.Table);\r\n            var item = new T();" +
            "\r\n            prList.ForEach(p =>\r\n            {\r\n                if (row[p.Name" +
            "] != DBNull.Value)\r\n                {\r\n                    p.SetValue(item, row[" +
            "p.Name], null);\r\n                }\r\n            });\r\n            return item;\r\n " +
            "       }\r\n        public static List<PropertyInfo> GetPropertyInfo<T>(DataTable " +
            "dt) where T : class,new()\r\n        {\r\n            Type type = typeof(T);\r\n      " +
            "      var prList = new List<PropertyInfo>();\r\n            Array.ForEach(type.Get" +
            "Properties(), p =>\r\n            {\r\n                if (dt.Columns.Contains(p.Nam" +
            "e))\r\n                { \r\n                    prList.Add(p);\r\n                }\r\n" +
            "            });\r\n            return prList;\r\n        }\r\n        public static Li" +
            "st<T> ToList<T>(DataTable dt) where T : class,new()\r\n        {\r\n            var " +
            "prList=GetPropertyInfo<T>(dt);\r\n            List<T> ls = new List<T>();\r\n       " +
            "     foreach (DataRow row in dt.Rows)\r\n            {\r\n                var item =" +
            " new T();\r\n                prList.ForEach(p =>\r\n                {\r\n             " +
            "       if (row[p.Name] != DBNull.Value)\r\n                    {\r\n                " +
            "        p.SetValue(item, row[p.Name], null);\r\n                    }\r\n           " +
            "     });\r\n                ls.Add(item);\r\n            }\r\n            return ls;\r\n" +
            "        }\r\n        public static string GetWhereStr<T>(T entity, string tableNam" +
            "e, out List<SqlParameter> list, params string[] fields) where T : new()\r\n       " +
            " {\r\n            StringBuilder sbu = new StringBuilder();\r\n            list = new" +
            " List<SqlParameter>();\r\n\r\n            sbu.Append(\"\");\r\n            sbu.Append(\"s" +
            "elect * from [\" + tableName + \"] where (1=1)\");\r\n            if (fields != null)" +
            "\r\n            {\r\n                //遍历每一个要生成SQL的字段，取出内容\r\n                foreach " +
            "(string field in fields)\r\n                {\r\n                    object value = " +
            "entity.GetType().GetProperty(field).GetValue(entity, null);\r\n                   " +
            " if (value is int || value is double || value is decimal || value is double || v" +
            "alue is long || value is float)\r\n                    {\r\n\r\n                      " +
            "  sbu.AppendFormat(\" and ([{0}]=@{0})\", field);\r\n                        list.Ad" +
            "d(new SqlParameter(\"@\" + field + \"\", value));\r\n\r\n                    }\r\n        " +
            "            else if (value is DateTime)\r\n                    {\r\n                " +
            "        sbu.AppendFormat(\" and ([{0}]=@{0})\", field);\r\n                        l" +
            "ist.Add(new SqlParameter(\"@\" + field + \"\", Convert.ToDateTime(value)));\r\n\r\n     " +
            "               }\r\n                    else if (value is Guid)\r\n                 " +
            "   {\r\n                        sbu.AppendFormat(\" and ([{0}]=@{0})\", field);\r\n   " +
            "                     list.Add(new SqlParameter(\"@\" + field + \"\", new Guid(value." +
            "ToString())));\r\n\r\n                    }\r\n                    else if (value is B" +
            "oolean)\r\n                    {\r\n                        sbu.AppendFormat(\" and (" +
            "[{0}]=@{0})\", field);\r\n                        list.Add(new SqlParameter(\"@\" + f" +
            "ield + \"\", Convert.ToBoolean(value)));\r\n\r\n                    }\r\n               " +
            "     else if (value is String || value is Char)\r\n                    {\r\n        " +
            "                sbu.AppendFormat(\" and ([{0}]=@{0})\", field);\r\n                 " +
            "       list.Add(new SqlParameter(\"@\" + field + \"\", Convert.ToString(value)));\r\n\r" +
            "\n                    }\r\n                    else\r\n                    {\r\n       " +
            "                 sbu.AppendFormat(\" and ([{0}]=@{0})\", field);\r\n                " +
            "        list.Add(new SqlParameter(\"@\" + field + \"\",CommonExtend.ToDBValue(value)" +
            "));\r\n                    }\r\n                }\r\n            }\r\n            return" +
            " (sbu.ToString());\r\n        }\r\n    }\r\n}")]
        public string GenericSQLGeneratorHelper {
            get {
                return ((string)(this["GenericSQLGeneratorHelper"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("using System.Data.SqlClient;\r\nusing System.Data;\r\nusing ${namespace}Helper.Bases;" +
            "\r\n\r\nnamespace ${namespace}Helper\r\n{\r\n    public  class SqlServerHelper: BaseSqlH" +
            "elperConf, ISqlHelper<SqlConnection ,SqlParameter>\r\n    {\r\n        public SqlSer" +
            "verHelper() : base() { }\r\n        public SqlServerHelper(string name) : base(nam" +
            "e) { }\r\n\r\n\r\n        public object ExecuteScalar(string cmdText, params SqlParame" +
            "ter[] parameters)\r\n        {\r\n            using (SqlConnection conn = new SqlCon" +
            "nection(ConnectionStr))\r\n            {\r\n                conn.Open();\r\n          " +
            "      return ExecuteScalar(conn, cmdText, parameters );\r\n            }\r\n        " +
            "}\r\n\r\n        public  DataSet ExecuteDataSet(string cmdText, params SqlParameter[" +
            "] parameters)\r\n        {\r\n            using (SqlConnection con = new SqlConnecti" +
            "on(ConnectionStr))\r\n            {\r\n                con.Open();\r\n                " +
            "return ExecuteDataSet(con, cmdText, parameters);\r\n            }\r\n        }\r\n\r\n  " +
            "      public  DataTable ExecuteDataTable(string cmdText, params SqlParameter[] p" +
            "arameters)\r\n        {\r\n            using (SqlConnection con = new SqlConnection(" +
            "ConnectionStr))\r\n            {\r\n                con.Open();\r\n                ret" +
            "urn ExecuteDataTable(con, cmdText, parameters );\r\n            }\r\n        }\r\n\r\n  " +
            "      public  int ExecuteNonQuery(SqlConnection conn, string cmdText,\r\n         " +
            "  params SqlParameter[] parameters)\r\n        {\r\n            using (SqlCommand cm" +
            "d = conn.CreateCommand())\r\n            {\r\n                cmd.CommandText = cmdT" +
            "ext;\r\n                cmd.Parameters.AddRange(parameters);\r\n                retu" +
            "rn cmd.ExecuteNonQuery();\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n  " +
            "      /// 执行返回第一行第一列\r\n        /// </summary>\r\n        /// <param name=\"conn\"></p" +
            "aram>\r\n        /// <param name=\"cmdText\"></param>\r\n        /// <param name=\"para" +
            "meters\"></param>\r\n        /// <returns></returns>\r\n        public  object Execut" +
            "eScalar(SqlConnection conn, string cmdText,\r\n            params SqlParameter[] p" +
            "arameters)\r\n        {\r\n            using (SqlCommand cmd = conn.CreateCommand())" +
            "\r\n            {\r\n                cmd.CommandText = cmdText;\r\n                cmd" +
            ".Parameters.AddRange(parameters);\r\n                return cmd.ExecuteScalar();\r\n" +
            "            }\r\n        }\r\n        /// <summary>\r\n        /// 执行返回DataTable\r\n    " +
            "    /// </summary>\r\n        /// <param name=\"con\"></param>\r\n        /// <param n" +
            "ame=\"cmdText\"></param>\r\n        /// <param name=\"parameters\"></param>\r\n        /" +
            "// <returns></returns>\r\n        public  DataTable ExecuteDataTable(SqlConnection" +
            " con, string cmdText, params SqlParameter[] parameters)\r\n        {\r\n            " +
            "return ExecuteDataSet(con, cmdText, parameters).Tables[0];\r\n        }\r\n        /" +
            "// <summary>\r\n        /// 执行返回DataSet\r\n        /// </summary>\r\n        /// <para" +
            "m name=\"con\"></param>\r\n        /// <param name=\"cmdText\"></param>\r\n        /// <" +
            "param name=\"parameters\"></param>\r\n        /// <returns></returns>\r\n        publi" +
            "c  DataSet ExecuteDataSet(SqlConnection con, string cmdText, params SqlParameter" +
            "[] parameters)\r\n        {\r\n            using (SqlCommand cmd = con.CreateCommand" +
            "())\r\n            {\r\n                cmd.CommandText = cmdText;\r\n                " +
            "cmd.Parameters.AddRange(parameters);\r\n                using (SqlDataAdapter adap" +
            "ter = new SqlDataAdapter(cmd))\r\n                {\r\n                    DataSet d" +
            "s = new DataSet();\r\n                    adapter.FillSchema(ds, SchemaType.Source" +
            ");\r\n                    adapter.Fill(ds);\r\n                    return ds;\r\n     " +
            "           }\r\n            }\r\n        }\r\n\r\n        public  int ExecuteNonQuery(st" +
            "ring cmdText, params SqlParameter[] parameters)\r\n        {\r\n            using (S" +
            "qlConnection conn = new SqlConnection(ConnectionStr))\r\n            {\r\n          " +
            "      conn.Open();\r\n                return ExecuteNonQuery(conn, cmdText, parame" +
            "ters );\r\n            }\r\n        }\r\n    }\r\n}")]
        public string SqlHelper {
            get {
                return ((string)(this["SqlHelper"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("using System.Data;\r\nusing MySql.Data.MySqlClient;\r\nusing ${namespace}Helper.Bases" +
            ";\r\n\r\nnamespace ${namespace}Helper\r\n{\r\n    public  class MySqlHelper : BaseSqlHel" +
            "perConf, ISqlHelper<MySqlConnection, MySqlParameter>\r\n    {\r\n        public MySq" +
            "lHelper() : base() { }\r\n        public MySqlHelper(string name) : base(name) { }" +
            "\r\n\r\n        public DataSet ExecuteDataSet(string cmdText, params MySqlParameter[" +
            "] parameters)\r\n        {\r\n            using (MySqlConnection con = new MySqlConn" +
            "ection(ConnectionStr))\r\n            {\r\n                con.Open();\r\n            " +
            "    return ExecuteDataSet(con, cmdText, parameters);\r\n            }\r\n        }\r\n" +
            "\r\n        public DataSet ExecuteDataSet(MySqlConnection con, string cmdText, par" +
            "ams MySqlParameter[] parameters)\r\n        {\r\n            using (MySqlCommand cmd" +
            " = con.CreateCommand())\r\n            {\r\n                cmd.CommandText = cmdTex" +
            "t;\r\n                cmd.Parameters.AddRange(parameters);\r\n                using " +
            "(MySqlDataAdapter adapter = new MySqlDataAdapter(cmd))\r\n                {\r\n     " +
            "               DataSet ds = new DataSet();\r\n                    adapter.FillSche" +
            "ma(ds, SchemaType.Source);\r\n                    adapter.Fill(ds);\r\n             " +
            "       return ds;\r\n                }\r\n            }\r\n        }\r\n\r\n        public" +
            " DataTable ExecuteDataTable(string cmdText, params MySqlParameter[] parameters)\r" +
            "\n        {\r\n            using (MySqlConnection con = new MySqlConnection(Connect" +
            "ionStr))\r\n            {\r\n                con.Open();\r\n                return Exe" +
            "cuteDataTable(con, cmdText, parameters);\r\n            }\r\n        }\r\n\r\n        pu" +
            "blic DataTable ExecuteDataTable(MySqlConnection con, string cmdText, params MySq" +
            "lParameter[] parameters)\r\n        {\r\n            return ExecuteDataSet(con, cmdT" +
            "ext, parameters).Tables[0];\r\n        }\r\n\r\n        public int ExecuteNonQuery(str" +
            "ing cmdText, params MySqlParameter[] parameters)\r\n        {\r\n            using (" +
            "MySqlConnection conn = new MySqlConnection(ConnectionStr))\r\n            {\r\n     " +
            "           conn.Open();\r\n                return ExecuteNonQuery(conn, cmdText, p" +
            "arameters);\r\n            }\r\n        }\r\n\r\n        public int ExecuteNonQuery(MySq" +
            "lConnection conn, string cmdText, params MySqlParameter[] parameters)\r\n        {" +
            "\r\n            using (MySqlCommand cmd = conn.CreateCommand())\r\n            {\r\n  " +
            "              cmd.CommandText = cmdText;\r\n                cmd.Parameters.AddRang" +
            "e(parameters);\r\n                return cmd.ExecuteNonQuery();\r\n            }\r\n  " +
            "      }\r\n\r\n        public object ExecuteScalar(string cmdText, params MySqlParam" +
            "eter[] parameters)\r\n        {\r\n            using (MySqlConnection conn = new MyS" +
            "qlConnection(ConnectionStr))\r\n            {\r\n                conn.Open();\r\n     " +
            "           return ExecuteScalar(conn, cmdText, parameters);\r\n            }\r\n    " +
            "    }\r\n\r\n        public object ExecuteScalar(MySqlConnection conn, string cmdTex" +
            "t, params MySqlParameter[] parameters)\r\n        {\r\n            using (MySqlComma" +
            "nd cmd = conn.CreateCommand())\r\n            {\r\n                cmd.CommandText =" +
            " cmdText;\r\n                cmd.Parameters.AddRange(parameters);\r\n               " +
            " return cmd.ExecuteScalar();\r\n            }\r\n        }\r\n    }\r\n}\r\n")]
        public string MySqlHelper {
            get {
                return ((string)(this["MySqlHelper"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("using MySql.Data.MySqlClient;\r\nusing System;\r\nusing System.Collections.Generic;\r\n" +
            "using System.Data;\r\nusing System.Reflection;\r\nusing System.Text;\r\nnamespace ${na" +
            "mespace}Helper\r\n{\r\n    public static class GenericSQLGenerator\r\n    {\r\n        p" +
            "ublic static T ToModel<T>(DataRow row) where T : class, new()\r\n        {\r\n      " +
            "      var prList = GetPropertyInfo<T>(row.Table);\r\n            var item = new T(" +
            ");\r\n            prList.ForEach(p =>\r\n            {\r\n                if (row[p.Na" +
            "me] != DBNull.Value)\r\n                {\r\n                    p.SetValue(item, ro" +
            "w[p.Name], null);\r\n                }\r\n            });\r\n            return item;\r" +
            "\n        }\r\n        public static List<PropertyInfo> GetPropertyInfo<T>(DataTabl" +
            "e dt) where T : class, new()\r\n        {\r\n            Type type = typeof(T);\r\n   " +
            "         var prList = new List<PropertyInfo>();\r\n            Array.ForEach(type." +
            "GetProperties(), p =>\r\n            {\r\n                if (dt.Columns.Contains(p." +
            "Name))\r\n                {\r\n                    prList.Add(p);\r\n                }" +
            "\r\n            });\r\n            return prList;\r\n        }\r\n        public static " +
            "List<T> ToList<T>(DataTable dt) where T : class, new()\r\n        {\r\n            v" +
            "ar prList = GetPropertyInfo<T>(dt);\r\n            List<T> ls = new List<T>();\r\n  " +
            "          foreach (DataRow row in dt.Rows)\r\n            {\r\n                var i" +
            "tem = new T();\r\n                prList.ForEach(p =>\r\n                {\r\n        " +
            "            if (row[p.Name] != DBNull.Value)\r\n                    {\r\n           " +
            "             p.SetValue(item, row[p.Name], null);\r\n                    }\r\n      " +
            "          });\r\n                ls.Add(item);\r\n            }\r\n            return " +
            "ls;\r\n        }\r\n        public static string GetWhereStr<T>(T entity, string tab" +
            "leName, out List<MySqlParameter> list, params string[] fields) where T : new()\r\n" +
            "        {\r\n            StringBuilder sbu = new StringBuilder();\r\n            lis" +
            "t = new List<MySqlParameter>();\r\n\r\n            sbu.Append(\"\");\r\n            sbu." +
            "Append(\"select * from `\" + tableName + \"` where (1=1)\");\r\n            if (fields" +
            " != null)\r\n            {\r\n                //遍历每一个要生成MySql的字段，取出内容\r\n             " +
            "   foreach (string field in fields)\r\n                {\r\n                    obje" +
            "ct value = entity.GetType().GetProperty(field).GetValue(entity, null);\r\n        " +
            "            if (value is int || value is double || value is decimal || value is " +
            "double || value is long || value is float)\r\n                    {\r\n\r\n           " +
            "             sbu.AppendFormat(\" and (`{0}`=@{0})\", field);\r\n                    " +
            "    list.Add(new MySqlParameter(\"@\" + field + \"\", value));\r\n\r\n                  " +
            "  }\r\n                    else if (value is DateTime)\r\n                    {\r\n   " +
            "                     sbu.AppendFormat(\" and (`{0}`=@{0})\", field);\r\n            " +
            "            list.Add(new MySqlParameter(\"@\" + field + \"\", Convert.ToDateTime(val" +
            "ue)));\r\n\r\n                    }\r\n                    else if (value is Guid)\r\n  " +
            "                  {\r\n                        sbu.AppendFormat(\" and (`{0}`=@{0})" +
            "\", field);\r\n                        list.Add(new MySqlParameter(\"@\" + field + \"\"" +
            ", new Guid(value.ToString())));\r\n\r\n                    }\r\n                    el" +
            "se if (value is Boolean)\r\n                    {\r\n                        sbu.App" +
            "endFormat(\" and (`{0}`=@{0})\", field);\r\n                        list.Add(new MyS" +
            "qlParameter(\"@\" + field + \"\", Convert.ToBoolean(value)));\r\n\r\n                   " +
            " }\r\n                    else if (value is String || value is Char)\r\n            " +
            "        {\r\n                        sbu.AppendFormat(\" and (`{0}`=@{0})\", field);" +
            "\r\n                        list.Add(new MySqlParameter(\"@\" + field + \"\", Convert." +
            "ToString(value)));\r\n\r\n                    }\r\n                    else\r\n         " +
            "           {\r\n                        sbu.AppendFormat(\" and (`{0}`=@{0})\", fiel" +
            "d);\r\n                        list.Add(new MySqlParameter(\"@\" + field + \"\", Commo" +
            "nExtend.ToDBValue(value)));\r\n                    }\r\n                }\r\n         " +
            "   }\r\n            return (sbu.ToString());\r\n        }\r\n    }\r\n}")]
        public string GenericMySQLGeneratorHelper {
            get {
                return ((string)(this["GenericMySQLGeneratorHelper"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"using System;

namespace ${namespace}Helper
{
    public static  class CommonExtend
    {
        /// <summary>
        /// null 转换为DBNull
        /// </summary>
        /// <param name=""value""></param>
        /// <returns></returns>
        public static object ToDBValue( object value)
        {
            return value == null ? DBNull.Value : value;
        }
        /// <summary>
        /// DBNull转换为null
        /// </summary>
        /// <param name=""dbValue""></param>
        /// <returns></returns>
        public static object FromDBValue( object dbValue)
        {
            return dbValue == DBNull.Value ? null : dbValue;
        }
    }
}")]
        public string CommonExtend {
            get {
                return ((string)(this["CommonExtend"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"using System.Configuration;

namespace ${namespace}Helper.Bases
{
    public abstract class BaseSqlHelperConf
    {
        protected string ConnectionStr { get; set; }

        public   BaseSqlHelperConf() {
            ConnectionStr = ConfigurationManager.ConnectionStrings[""dbConnect""].ConnectionString;
        }
        public BaseSqlHelperConf(string name)
        {
            ConnectionStr = ConfigurationManager.ConnectionStrings[name].ConnectionString;
        }
        public void ChangeConnectionSource(string name)
        {
            ConnectionStr= ConfigurationManager.ConnectionStrings[name].ConnectionString;
        }
    }
}")]
        public string BaseSqlHelperConf {
            get {
                return ((string)(this["BaseSqlHelperConf"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("using System.Data;\r\nusing System.Data.Common;\r\n\r\nnamespace ${namespace}Helper.Bas" +
            "es\r\n{\r\n    public interface ISqlHelper<C,P> \r\n        where C: DbConnection,new " +
            "()\r\n       where P: DbParameter,new ()\r\n    {\r\n        /// <summary>\r\n        //" +
            "/ 执行返回受影响的行数\r\n        /// </summary>\r\n        /// <param name=\"cmdText\"></param>" +
            "\r\n        /// <param name=\"parameters\"></param>\r\n        /// <returns></returns>" +
            "\r\n        int ExecuteNonQuery(string cmdText, params P[] parameters);\r\n\r\n       " +
            " /// <summary>\r\n        /// 执行返回DataSet\r\n        /// </summary>\r\n        /// <pa" +
            "ram name=\"cmdText\"></param>\r\n        /// <param name=\"parameters\"></param>\r\n    " +
            "    /// <returns></returns>\r\n        DataSet ExecuteDataSet(string cmdText, para" +
            "ms P[] parameters);\r\n\r\n        /// <summary>\r\n        /// 执行返回第一行第一列\r\n        //" +
            "/ </summary>\r\n        /// <param name=\"cmdText\"></param>\r\n        /// <param nam" +
            "e=\"parameters\"></param>\r\n        /// <returns></returns>\r\n        object Execute" +
            "Scalar(string cmdText, params P[] parameters);\r\n\r\n        /// <summary>\r\n       " +
            " /// 执行返回DataTable\r\n        /// </summary>\r\n        /// <param name=\"cmdText\"></" +
            "param>\r\n        /// <param name=\"parameters\"></param>\r\n        /// <returns></re" +
            "turns>\r\n        DataTable ExecuteDataTable(string cmdText, params P[] parameters" +
            ");\r\n\r\n        /// <summary>\r\n        /// 执行返回受影响的行数\r\n        /// </summary>\r\n   " +
            "     /// <param name=\"conn\"></param>\r\n        /// <param name=\"cmdText\"></param>" +
            "\r\n        /// <param name=\"parameters\"></param>\r\n        /// <returns></returns>" +
            "\r\n        int ExecuteNonQuery(C conn, string cmdText,\r\n           params P[] par" +
            "ameters);\r\n\r\n        /// <summary>\r\n        /// 执行返回第一行第一列\r\n        /// </summar" +
            "y>\r\n        /// <param name=\"conn\"></param>\r\n        /// <param name=\"cmdText\"><" +
            "/param>\r\n        /// <param name=\"parameters\"></param>\r\n        /// <returns></r" +
            "eturns>\r\n        object ExecuteScalar(C conn, string cmdText,\r\n            param" +
            "s P[] parameters);\r\n\r\n\r\n        /// <summary>\r\n        /// 执行返回DataTable\r\n      " +
            "  /// </summary>\r\n        /// <param name=\"con\"></param>\r\n        /// <param nam" +
            "e=\"cmdText\"></param>\r\n        /// <param name=\"parameters\"></param>\r\n        ///" +
            " <returns></returns>\r\n        DataTable ExecuteDataTable(C con, string cmdText, " +
            "params P[] parameters);\r\n\r\n\r\n        /// <summary>\r\n        /// 执行返回DataSet\r\n   " +
            "     /// </summary>\r\n        /// <param name=\"con\"></param>\r\n        /// <param " +
            "name=\"cmdText\"></param>\r\n        /// <param name=\"parameters\"></param>\r\n        " +
            "/// <returns></returns>\r\n        DataSet ExecuteDataSet(C con, string cmdText, p" +
            "arams P[] parameters);\r\n    }\r\n}")]
        public string ISqlHelper {
            get {
                return ((string)(this["ISqlHelper"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("using System.Collections.Generic;\r\n\r\nnamespace namespace ${namespace}IDAL.Bases\r\n" +
            "{\r\n    public   interface IBaseDAL<T> where T :class,new ()\r\n    {\r\n       \r\n   " +
            "     /// <summary>\r\n        /// ToModel\r\n        /// </summary>\r\n        /// <pa" +
            "ram name=\"row\"></param>\r\n        /// <returns></returns>\r\n        T ToModel(Syst" +
            "em.Data.DataRow row);\r\n\r\n        /// <summary>\r\n        /// 插入一条记录\r\n        /// " +
            "</summary>\r\n        /// <param name=\"model\">Hlt_CardInfo类的对象</param>\r\n        //" +
            "/ <returns>object 主键</returns>\r\n        object Insert(T model);\r\n\r\n        /// <" +
            "summary>\r\n        /// 删除一条记录\r\n        /// </summary>\r\n        /// <param name=\"I" +
            "d\">主键</param>\r\n        /// <returns>删除是否成功</returns>\r\n        bool DeleteById(st" +
            "ring id);\r\n\r\n\r\n        /// <summary>\r\n        /// 更新一条记录\r\n        /// </summary>" +
            "\r\n        /// <param name=\"model\">Hlt_CardInfo类的对象</param>\r\n        /// <returns" +
            ">更新是否成功</returns>\r\n        bool Update(T model);\r\n\r\n        /// <summary>\r\n     " +
            "   /// 获得一条记录\r\n        /// </summary>\r\n        /// <param name=\"Id\">主键</param>\r\n" +
            "        /// <returns>Hlt_CardInfo类的对象</returns>\r\n        T GetById(string id);\r\n" +
            "\r\n\r\n        /// <summary>\r\n        /// 获得所有记录\r\n        /// </summary>\r\n        /" +
            "// <returns>Hlt_CardInfo类的对象的枚举</returns>\r\n        IEnumerable<T> ListAll();\r\n\r\n" +
            "        /// <summary>\r\n        /// 通过条件获得满足条件的记录\r\n        /// </summary>\r\n      " +
            "  /// <param name=\"model\">Hlt_CardInfo类的对象</param>\r\n        /// <param name=\"whe" +
            "reStr\">其他的sql 语句  </param>\r\n        /// <param name=\"fields\">需要的条件的字段名</param>\r\n" +
            "        /// <returns>满足条件的记录</returns>\r\n        IEnumerable<T> ListByWhere(T mod" +
            "el, string whereStr, params string[] fields);\r\n\r\n        /// <summary>\r\n        " +
            "/// 分页查询\r\n        /// </summary>\r\n        /// <param name=\"page\">页数（从1开始计数）</par" +
            "am>\r\n        /// <param name=\"num\">每页个数（从1开始计数）</param>\r\n        /// <param name" +
            "=\"orderBy\">排序条件</param>\r\n        /// <param name=\"isDesc\">是否降序</param>\r\n        " +
            "/// <param name=\"whereArr\">查询条件：例如ID=1,NAME=\'ADMIN\'</param>\r\n        /// <return" +
            "s></returns>\r\n        IEnumerable<T> ListByPage(int page = 1, int num = 10, stri" +
            "ng orderBy = \"id\", bool isDesc = true, params string[] whereArr);\r\n    }\r\n}")]
        public string IBaseDAL {
            get {
                return ((string)(this["IBaseDAL"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"using ${namespace}Helper.Bases;
using System.Data.Common;

namespace ${namespace}DAL.Bases
{
    public abstract class BaseDALConf<C, P, H>
        where C : DbConnection, new()
        where P : DbParameter, new()
        where H : ISqlHelper<C, P>, new()
    {
        protected ISqlHelper<C, P> SqlHelper { get; set; }

        public BaseDALConf(H helper)
        {
            this.SqlHelper = helper;
        }
        public BaseDALConf()
        {
            this.SqlHelper = new H();
        }
    }
}
")]
        public string BaseDALConf {
            get {
                return ((string)(this["BaseDALConf"]));
            }
        }
    }
}
